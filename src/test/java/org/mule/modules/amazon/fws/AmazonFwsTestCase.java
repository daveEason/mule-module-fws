/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.modules.amazon.fws;

import org.junit.Before;
import org.junit.Test;
import org.mule.modules.amazon.fws.inbound.generated_classes.Address;
import org.mule.modules.amazon.fws.inbound.generated_classes.MerchantSKUQuantityItem;

import java.security.SignatureException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class AmazonFwsTestCase {
    //TODO: Implement 'skip tests' functionality if GetServiceStatus fails (enforce test connectivity pre-requisite)
    private AmazonFwsCloudConnector connector;
    private Address address;
    private MerchantSKUQuantityItem[] merchantSKUQuantityItems;
    private String shipmentId;
    private String shipmentName;
    private String destinationFulfillmentCenter;
    private Boolean systemConnectivity = Boolean.TRUE;

    @Before
    public void setUp() throws Exception {
        connector = new AmazonFwsCloudConnector();
        connector.setAwsAccessKeyId(System.getenv("user.key.aws.access"));
        connector.setAwsSecretAccessKey(System.getenv("user.key.aws.secret"));
        connector.initialise();

        address = new Address();
        merchantSKUQuantityItems = new MerchantSKUQuantityItem[1];

        // Initialize address
        address.setName("Mulesoft");
        address.setAddressLine1("30 Maiden Lane");
        address.setAddressLine2("Level 5");
        address.setCity("San Francisco");
        address.setStateOrProvinceCode("CA");
        address.setCountryCode("US");
        address.setPostalCode("94108");

        // Initialize mskuQuantityItems
        merchantSKUQuantityItems[0] = new MerchantSKUQuantityItem();
        merchantSKUQuantityItems[0].setMerchantSKU("QP-VRBC-2SZ9");
        merchantSKUQuantityItems[0].setQuantity(1);

        //Initialize shipment
        shipmentName = "test shipment 01";

    }

    @Test
    public void invokeGetServiceStatus() {
        /*
            Invoke getServiceStatus()
        */
        String result = null;
        String serviceResponse = "";
        try {
            result = connector.getInboundServiceStatus();
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:GetServiceStatusResponse", result.substring(22, 51));

        serviceResponse = result.substring(181, 200);
        assertEquals("service responding.",serviceResponse);

        if (serviceResponse != "service responding."){
            systemConnectivity = Boolean.FALSE;
        }
    }

    @Test
    public void invokeGetInboundShipmentPreview() {
        /*
            Invoke getInboundShipmentPreview()
        */

        String result = null;
        try {
            result = connector.getInboundShipmentPreview(address.getName(),
                    address.getAddressLine1(),
                    address.getAddressLine2(),
                    address.getCity(),
                    address.getStateOrProvinceCode(),
                    address.getCountryCode(),
                    address.getPostalCode(),
                    merchantSKUQuantityItems[0].getMerchantSKU(),
                    merchantSKUQuantityItems[0].getQuantity());
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:GetInboundShipmentPreviewResponse xmlns:ns1=\"http://fba-inbound.amazonaws.com/doc/2007-05-10/\"><ns1:GetInboundShipmentPreviewResult><ns1:ShipmentPreview><ns1:ShipmentId>", result.substring(22, 196));

        //initialize shipmentId and destinationFulfillmentCenter
        //TODO: Determine if invocation of GetInoundShipmentPreview has been successful before initialising these fields.
        this.shipmentId = result.substring(196,205);
        this.destinationFulfillmentCenter = (result.substring(256,260));
    }

/*
    @Test
    public void invokePutInboundShipment() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke putInboundShipment()
        *//*

        String result = null;
        try {
            result = connector.putInboundShipment(shipmentId,
                    shipmentName,
                    destinationFulfillmentCenter,
                    address.getName(),
                    address.getAddressLine1(),
                    address.getAddressLine2(),
                    address.getCity(),
                    address.getStateOrProvinceCode(),
                    address.getCountryCode(),
                    address.getPostalCode(),
                    merchantSKUQuantityItems[0].getMerchantSKU(),
                    merchantSKUQuantityItems[0].getQuantity());
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:PutInboundShipmentResponse", result.substring(22, 53));
    }

    @Test
    public void invokePutInboundShipmentData() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke putInboundShipmentData()
        *//*

        String result = null;
        try {
            result = connector.putInboundShipmentData(shipmentId,
                    shipmentName,
                    destinationFulfillmentCenter,
                    address.getName(),
                    address.getAddressLine1(),
                    address.getAddressLine2(),
                    address.getCity(),
                    address.getStateOrProvinceCode(),
                    address.getCountryCode(),
                    address.getPostalCode());
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:PutInboundShipmentDataResponse", result.substring(22, 57));
    }

    @Test
    public void invokePutInboundShipmentItems() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke putInboundShipmentItems()
        *//*

        String result = null;
        try {
            result = connector.putInboundShipmentItems(shipmentId,
                    merchantSKUQuantityItems[0].getMerchantSKU(),
                    merchantSKUQuantityItems[0].getQuantity());
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:PutInboundShipmentItemsResponse", result.substring(22, 58));
    }

    @Test
    public void invokeGetFulfillmentIdentifier() {
        assumeTrue(systemConnectivity);
        */
/*
        * Invoke getFulfillmentIdentifier()
         *//*

        String merchantItemASIN = "";
        String merchantItemCondition = "";
        String merchantItemMSKU = "";
        String result = null;
        try {
            result = connector.getFulfillmentIdentifier(merchantItemASIN, merchantItemCondition, merchantItemMSKU);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentIdentifierResponse", result.substring(22, 59));
    }

    @Test
    public void invokeGetFulfillmentIdentifierForMSKU() {
        assumeTrue(systemConnectivity);
        */
/*
       * Invoke getFulfillmentIdentifierForMSKU()
        *//*

        String merchantSKU = "";
        String result = null;
        try {
            result = connector.getFulfillmentIdentifierForMSKU(merchantSKU);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentIdentifierForMSKUResponse", result.substring(22, 66));
    }

    @Test
    public void invokeGetFulfillmentItemByFNSKU() {
        assumeTrue(systemConnectivity);
        */
/*
       * Invoke getFulfillmentItemByFNSKU()
        *//*

        String fulfillmentNetworkSKU = "";
        String result = null;
        try {
            result = connector.getFulfillmentItemByFNSKU(fulfillmentNetworkSKU);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentItemByFNSKUResponse", result.substring(22, 60));
    }

    @Test
    public void invokeGetFulfillmentItemByMSKU() {
        assumeTrue(systemConnectivity);
        */
/*
       * Invoke getFulfillmentItemByMSKU()
        *//*

        String merchantSKU = "";
        String result = null;
        try {
            result = connector.getFulfillmentItemByMSKU(merchantSKU);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentItemByMSKUResponse", result.substring(22, 59));
    }

    @Test
    public void invokeGetInboundShipmentData() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke getInboundShipmentData()
        *//*

        String result = null;
        try {
            result = connector.getInboundShipmentData(shipmentId);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:GetInboundShipmentDataResponse", result.substring(22, 57));

    }

    @Test
    public void invokeListAllFulfillmentItems() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke listAllFulfillmentItems()
            Invoke listAllFulfillmentItemsByNextToken()
        *//*

        Boolean includeInactive = Boolean.TRUE;
        Integer maxCount = 3;

        String result = null;
        try {
            result = connector.listAllFulfillmentItems(includeInactive, maxCount);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:ListAllFulfillmentItemsResponse xmlns:ns1=\"http://fba-inbound.amazonaws.com/doc/2007-05-10/\">", result.substring(22, 98));

        //TODO: Map nextToken from previous listFulfillmentItemsResponse
        String nextToken = "";
        try {
            result = connector.listAllFulfillmentItemsByNextToken(nextToken);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:ListAllFulfillmentItemsByNextTokenResponse", result.substring(22, 69));

    }

    @Test
    public void invokeListInboundShipmentItems() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke listInboundShipmentItems()
            Invoke listInboundShipmentItemsByNextToken()
        *//*

        Integer maxCount = 3;
        String result = null;
        try {
            result = connector.listInboundShipmentItems(shipmentId, maxCount);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:ListInboundShipmentItemsResponse", result.substring(22, 59));

        //TODO: Map nextToken from previous listInboundShipmentItemsResponse
        String nextToken = "";
        try {
            result = connector.listInboundShipmentItemsByNextToken(nextToken);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:ListInboundShipmentItemsByNextTokenResponse", result.substring(22, 70));

    }

    @Test
    public void invokeListInboundShipments() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke listInboundShipments()
            Invoke listInboundShipmentsByNextToken()
        *//*

        Integer maxCount = 3;
        String result = null;
        try {
            result = connector.listInboundShipments(null, null, null, maxCount);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:ListInboundShipmentsResponse", result.substring(22, 55));

        //TODO: Map nextToken from previous listInboundShipmentsResponse
        String nextToken = "";
        try {
            result = connector.listInboundShipmentsByNextToken(nextToken);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:ListInboundShipmentsByNextTokenResponse", result.substring(22, 66));

    }

    @Test
    public void invokeSetInboundShipmentStatus() {
        assumeTrue(systemConnectivity);
        */
/*
            Invoke setInboundShipmentStatus()
        *//*

        String shipmentStatus = "Cancelled";
        String result = null;
        try {
            result = connector.setInboundShipmentStatus(shipmentId, shipmentStatus);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:SetInboundShipmentStatusResponse", result.substring(22, 59));
    }

    @Test
    public void invokeDeleteInboundShipmentItems() {
        assumeTrue(systemConnectivity);
        */
/*
        * Invoke deleteInboundShipmentItems()
         *//*

        String merchantSKU = merchantSKUQuantityItems[0].getMerchantSKU();
        String result = null;
        try {
            result = connector.deleteInboundShipmentItems(shipmentId, merchantSKU);
        } catch (SignatureException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertEquals("<ns1:DeleteInboundShipmentItemsResponse", result.substring(22, 61));
    }
*/
}
