/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.modules.amazon.fws;

import org.junit.Before;
import org.junit.Test;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.modules.amazon.fws.inbound.generated_classes.Address;
import org.mule.modules.amazon.fws.inbound.generated_classes.MerchantSKUQuantityItem;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class AmazonFwsTestCase {
    private AmazonFwsCloudConnector connector;
    private Address address;
    private MerchantSKUQuantityItem[] merchantSKUQuantityItems;
    private String merchantItemASIN;
    private String merchantItemCondition;
    private String shipmentId;
    private String shipmentName;
    private String destinationFulfillmentCenter;
    private String fulfillmentNetworkSKU;
    private String result;

    @Before
    public void setUp() throws InitialisationException {

        //Initialise connector
        connector = new AmazonFwsCloudConnector();
        connector.setAwsAccessKeyId(System.getenv("user.key.aws.access"));
        connector.setAwsSecretAccessKey(System.getenv("user.key.aws.secret"));
        connector.initialise();

        address = new Address();
        merchantSKUQuantityItems = new MerchantSKUQuantityItem[3];

        // Initialize address
        address.setName("Mulesoft");
        address.setAddressLine1("30 Maiden Lane");
        address.setAddressLine2("Level 5");
        address.setCity("San Francisco");
        address.setStateOrProvinceCode("CA");
        address.setCountryCode("US");
        address.setPostalCode("94108");

        // Initialize mskuQuantityItems
        merchantSKUQuantityItems[0] = new MerchantSKUQuantityItem();
        merchantSKUQuantityItems[0].setMerchantSKU("QP-VRBC-2SZ9");
        merchantSKUQuantityItems[0].setQuantity(1);
        merchantSKUQuantityItems[1] = new MerchantSKUQuantityItem();
        merchantSKUQuantityItems[1].setMerchantSKU("LH-DVZ6-7JWL");
        merchantSKUQuantityItems[1].setQuantity(3);
        merchantSKUQuantityItems[2] = new MerchantSKUQuantityItem();
        merchantSKUQuantityItems[2].setMerchantSKU("96-LE8R-4DTZ");
        merchantSKUQuantityItems[2].setQuantity(5);

        // Initialize merchant Item details
        merchantItemASIN = "B0000508U6";
        merchantItemCondition = "NEW_ITEM";

        //Initialize shipment details
        shipmentName = "test shipment 01";
    }

    @Test
    public void invokeGetServiceStatus() {

        String serviceResponse;
        result = connector.getInboundServiceStatus();
        assertNotNull(result);
        assertEquals("<ns1:GetServiceStatusResponse", result.substring(22, 51));

        serviceResponse = result.substring(181, 200);
        assertEquals("service responding.", serviceResponse);
    }

    @Test
    public void invokeGetFulfillmentIdentifierForMSKU() {

        String merchantSKU = merchantSKUQuantityItems[0].getMerchantSKU();
        result = connector.getFulfillmentIdentifierForMSKU(merchantSKU);
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentIdentifierForMSKUResponse", result.substring(22, 66));
    }

    @Test
    public void invokeGetFulfillmentItemByMSKU() {

        String merchantSKU = merchantSKUQuantityItems[0].getMerchantSKU();
        result = connector.getFulfillmentItemByMSKU(merchantSKU);
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentItemByMSKUResponse", result.substring(22, 59));
    }

    @Test
    public void invokeListAllFulfillmentItems() {

        /*
            Invoke listAllFulfillmentItems()
            Invoke listAllFulfillmentItemsByNextToken()
        */

        Boolean includeInactive = Boolean.TRUE;
        Integer maxCount = 2;

        result = connector.listAllFulfillmentItems(includeInactive, maxCount);
        assertNotNull(result);
        assertEquals("<ns1:ListAllFulfillmentItemsResponse xmlns:ns1=\"http://fba-inbound.amazonaws.com/doc/2007-05-10/\">", result.substring(22, 120));


        //TODO: Complete 'hasNext' processing
//        String hasNext = result.substring(347,351);
//        if (hasNext.equals("true")){
//            String nextToken = result.substring(170,318);
//            try {
//                connector.initialise();
//            } catch (InitialisationException e) {
//                e.printStackTrace();
//            }
//            result = connector.listAllFulfillmentItemsByNextToken(nextToken);
//            assertNotNull(result);
//            assertEquals("<ns1:ListAllFulfillmentItemsByNextTokenResponse", result.substring(22, 69));
//        }
    }

    @Test
    public void invokeGetInboundShipmentPreview() {

        result = connector.getInboundShipmentPreview(address.getName(),
                address.getAddressLine1(),
                address.getAddressLine2(),
                address.getCity(),
                address.getStateOrProvinceCode(),
                address.getCountryCode(),
                address.getPostalCode(),
                merchantSKUQuantityItems[0].getMerchantSKU(),
                merchantSKUQuantityItems[0].getQuantity());
        assertNotNull(result);
        assertEquals("<ns1:GetInboundShipmentPreviewResponse xmlns:ns1=\"http://fba-inbound.amazonaws.com/doc/2007-05-10/\"><ns1:GetInboundShipmentPreviewResult><ns1:ShipmentPreview><ns1:ShipmentId>", result.substring(22, 196));

        if (result.substring(22, 196).equals("<ns1:GetInboundShipmentPreviewResponse xmlns:ns1=\"http://fba-inbound.amazonaws.com/doc/2007-05-10/\"><ns1:GetInboundShipmentPreviewResult><ns1:ShipmentPreview><ns1:ShipmentId>")) {
            //initialize shipmentId and destinationFulfillmentCenter
            this.shipmentId = result.substring(196, 205);
            this.destinationFulfillmentCenter = (result.substring(256, 260));
        }
    }

    @Test
    public void invokeGetFulfillmentIdentifier() {

        String merchantItemMSKU = merchantSKUQuantityItems[0].getMerchantSKU();
        result = connector.getFulfillmentIdentifier(merchantItemASIN, merchantItemCondition, merchantItemMSKU);
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentIdentifierResponse", result.substring(22, 59));

//        //TODO: complete populating FNSKU variable
//        if (result.substring(22, 59).equals("<ns1:GetFulfillmentIdentifierResponse")) {
//            //initialize fulfillmentNetworkSKU
//            this.fulfillmentNetworkSKU = result.substring(1, 2);
//        }

    }

    @Test
    public void invokeGetFulfillmentItemByFNSKU() {

        result = connector.getFulfillmentItemByFNSKU(fulfillmentNetworkSKU);
        assertNotNull(result);
        assertEquals("<ns1:GetFulfillmentItemByFNSKUResponse", result.substring(22, 60));
    }

//    @Test
//    public void invokePutInboundShipment() {
//
//        String result;
//        result = connector.putInboundShipment(shipmentId,
//                shipmentName,
//                destinationFulfillmentCenter,
//                address.getName(),
//                address.getAddressLine1(),
//                address.getAddressLine2(),
//                address.getCity(),
//                address.getStateOrProvinceCode(),
//                address.getCountryCode(),
//                address.getPostalCode(),
//                merchantSKUQuantityItems[0].getMerchantSKU(),
//                merchantSKUQuantityItems[0].getQuantity());
//        assertNotNull(result);
//        assertEquals("<ns1:PutInboundShipmentResponse", result.substring(22, 53));
//    }
//
//    @Test
//    public void invokePutInboundShipmentData() {
//
//        //Update address data
//        address.setName("Mulesoft.com");
//
//
//        String result;
//        result = connector.putInboundShipmentData(shipmentId,
//                shipmentName,
//                destinationFulfillmentCenter,
//                address.getName(),
//                address.getAddressLine1(),
//                address.getAddressLine2(),
//                address.getCity(),
//                address.getStateOrProvinceCode(),
//                address.getCountryCode(),
//                address.getPostalCode());
//        assertNotNull(result);
//        assertEquals("<ns1:PutInboundShipmentDataResponse", result.substring(22, 57));
//    }
//
//    @Test
//    public void invokePutInboundShipmentItems() {
//
//        String result;
//        result = connector.putInboundShipmentItems(shipmentId,
//                merchantSKUQuantityItems[0].getMerchantSKU(),
//                merchantSKUQuantityItems[0].getQuantity());
//        assertNotNull(result);
//        assertEquals("<ns1:PutInboundShipmentItemsResponse", result.substring(22, 58));
//    }
//
//    @Test
//    public void invokeGetInboundShipmentData() {
//
//        String result;
//        result = connector.getInboundShipmentData(shipmentId);
//        assertNotNull(result);
//        assertEquals("<ns1:GetInboundShipmentDataResponse", result.substring(22, 57));
//
//    }
//
//    @Test
//    public void invokeListInboundShipmentItems() {
//        /*
//            Invoke listInboundShipmentItems()
//            Invoke listInboundShipmentItemsByNextToken()
//         */
//
//        Integer maxCount = 3;
//        String result;
//        result = connector.listInboundShipmentItems(shipmentId, maxCount);
//        assertNotNull(result);
//        assertEquals("<ns1:ListInboundShipmentItemsResponse", result.substring(22, 59));
//
//        //TODO: Map nextToken from previous listInboundShipmentItemsResponse
//        String nextToken = "";
//        if (nextToken.length() > 0) {
//            result = connector.listInboundShipmentItemsByNextToken(nextToken);
//            assertNotNull(result);
//            assertEquals("<ns1:ListInboundShipmentItemsByNextTokenResponse", result.substring(22, 70));
//        }
//    }
//
//    @Test
//    public void invokeSetInboundShipmentStatus() {
//
//        String shipmentStatus = "Cancelled";
//        String result;
//        result = connector.setInboundShipmentStatus(shipmentId, shipmentStatus);
//        assertNotNull(result);
//        assertEquals("<ns1:SetInboundShipmentStatusResponse", result.substring(22, 59));
//    }
//
//    @Test
//    public void invokeListInboundShipments() {
//        /*
//            Invoke listInboundShipments()
//            Invoke listInboundShipmentsByNextToken()
//         */
//
//        Integer maxCount = 3;
//        String shipmentStatus = "Cancelled";
//        DateTime createdBefore = new DateTime();
//        DateTime createdAfter = new DateTime();
//        String result;
//        result = connector.listInboundShipments(shipmentStatus, createdBefore, createdAfter, maxCount);
//        assertNotNull(result);
//        assertEquals("<ns1:ListInboundShipmentsResponse", result.substring(22, 55));
//
//        //TODO: Map nextToken from previous listInboundShipmentsResponse
//        String nextToken = "";
//        if (nextToken.length() > 0){
//            result = connector.listInboundShipmentsByNextToken(nextToken);
//            assertNotNull(result);
//            assertEquals("<ns1:ListInboundShipmentsByNextTokenResponse", result.substring(22, 66));
//        }
//    }
//
//    @Test
//    public void invokeDeleteInboundShipmentItems() {
//
//        String merchantSKU = merchantSKUQuantityItems[0].getMerchantSKU();
//        String result;
//        result = connector.deleteInboundShipmentItems(shipmentId, merchantSKU);
//        assertNotNull(result);
//        assertEquals("<ns1:DeleteInboundShipmentItemsResponse", result.substring(22, 61));
//    }
}
